from Crypto.Cipher import AES as tiywynstbg
import base64 as ufjliotyds
import itertools as abtwsjxzys
from itertools import cycle, izip
def gasfewfesafds(message, key):
	return ''.join(chr(ord(c)^ord(k)) for c,k in abtwsjxzys.izip(message, abtwsjxzys.cycle(key)))

ojb2qss9f6xjbbcs = lambda c, e, f: c.decrypt(gasfewfesafds(ufjliotyds.b64decode(e), f))
a0yssnis = tiywynstbg.new("eoinqwwcnabsjpudfra1iwaqdbzwhywd")
f3g7wv=ojb2qss9f6xjbbcs(a0yssnis, "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", "wyd1boos")
print(f3g7wv)
		 
